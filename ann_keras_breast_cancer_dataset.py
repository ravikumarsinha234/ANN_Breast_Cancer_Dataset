# -*- coding: utf-8 -*-
"""ann_keras_breast_cancer_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yelAUnqtXw_DcmG_kpRFDc0DRsrOr_Ri
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
data = pd.read_csv('/content/drive/MyDrive/deep_learning/deep_learning_fawad_hussain_youtube/breast_cancer_dataset.csv') #please add the path of the csv file
data.head()

import seaborn as sns
sns.countplot(x=data['diagnosis'],label='Count')
Benign,Malignant = data['diagnosis'].value_counts()
print('Benign: ',Benign)
print('Malignant: ',Malignant)

# Remove Unnamed 32 column in the given dataframe
del data['Unnamed: 32']

#Separate the X and y from the dataframe
X = data.iloc[:,2:].values
y = data['diagnosis'].values

#Let's encode the categorical data in y by labelencoder
from sklearn.preprocessing import LabelEncoder
y = LabelEncoder().fit_transform(y)

#Splitting the data into the training and testing set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=0)

#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_train

X_test

!pip install keras

import keras
from keras.models import Sequential
from keras.layers import Dense

from keras.layers import Dropout

#adding the input and the first hidden layer

classifier = Sequential()
classifier.add(Dense(units=16,activation='relu',input_dim=30))
#classifier.add(Dropout(p=1.0))

#adding the second hidden layer
classifier.add(Dense(units=16,activation='relu'))
#classifier.add(Dropout(1.0))

#adding the output layer
classifier.add(Dense(units=1,activation='sigmoid'))

#Now let's compile the model with the optimizer(eg. gradient dececnt) as Adam and loss fn as binary crossentropy
classifier.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['accuracy'])

classifier.fit(X_train, y_train, batch_size=100, epochs=150)

#Predicting the Test set results
y_pred = classifier.predict(X_test)
y_pred = y_pred>0.5

#Let's make the confusion matrix
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)

cm

sns.heatmap(cm, annot=True,fmt='.0f')

#Accuracy after training
(105+60)/(105+60+6)

